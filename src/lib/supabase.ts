import { createClient } from '@supabase/supabase-js'
import type { Message } from '../types'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
})

// –¢–∏–ø—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase
export interface SupabaseUser {
  id: string
  email: string
  created_at: string
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø Message –¥–ª—è real-time
export interface RealtimeMessage extends Message {
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Supabase real-time
  created_at?: string
  updated_at?: string
}

// –¢–∏–ø—ã –¥–ª—è real-time –ø–æ–¥–ø–∏—Å–æ–∫
export type RealtimeEvent = 'INSERT' | 'UPDATE' | 'DELETE'

export interface RealtimePayload {
  eventType: RealtimeEvent
  new: RealtimeMessage
  old: RealtimeMessage
}

// –¢–∏–ø –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export interface SubscriptionStatus {
  state: 'SUBSCRIBED' | 'CHANNEL_ERROR' | 'TIMED_OUT' | 'CLOSED'
  error?: Error
}

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase REST API
export const supabaseFetch = async <T = any>(
  supabaseUrl: string,
  supabaseKey: string,
  endpoint: string,
  options: RequestInit = {}
): Promise<{ data?: T; error?: Error }> => {
  try {
    const url = `${supabaseUrl}/rest/v1/${endpoint}`
    const headers = {
      'apikey': supabaseKey,
      'Authorization': `Bearer ${supabaseKey}`,
      'Content-Type': 'application/json',
      'Prefer': 'return=representation',
      ...options.headers,
    }

    console.log('üåê [supabaseFetch] –ó–∞–ø—Ä–æ—Å –∫:', url)
    console.log('üîë [supabaseFetch] API –∫–ª—é—á:', supabaseKey ? '[–°–ö–†–´–¢]' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢')
    console.log('üìù [supabaseFetch] –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers)

    const response = await fetch(url, {
      ...options,
      headers,
    })

    console.log('üì° [supabaseFetch] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries())
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå [supabaseFetch] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        body: errorText
      })
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    const contentLength = response.headers.get('content-length')
    const hasContent = contentLength !== '0' && response.headers.get('transfer-encoding') !== 'chunked' || true

    console.log('üì¶ [supabaseFetch] –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', hasContent)

    if (hasContent) {
      try {
        const data = await response.json()
        console.log('‚úÖ [supabaseFetch] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', data)
        return { data }
      } catch (jsonError) {
        console.error('‚ùå [supabaseFetch] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError)
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –Ω–æ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π, –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        if (response.status === 204 || response.status === 202) {
          console.log('‚úÖ [supabaseFetch] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (204/202) - –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
          return { data: null as T }
        }
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${jsonError}`)
      }
    } else {
      console.log('‚úÖ [supabaseFetch] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
      return { data: null as T }
    }
  } catch (error) {
    console.error('‚ùå [supabaseFetch] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return { error: error as Error }
  }
}
