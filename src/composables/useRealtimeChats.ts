import { ref, onMounted, onUnmounted, type Ref } from 'vue'
import { supabase, RealtimePayload } from '@/lib/supabase'
import { useStore } from './useStore'
import type { Message } from '../types'

export interface UseRealtimeChatsReturn {
   isConnected: Ref<boolean>
   error: Ref<string | null>
   subscribe: () => void
   unsubscribe: () => void
 }

export function useRealtimeChats(): UseRealtimeChatsReturn {
  const store = useStore()
  const isConnected = ref(false)
  const error = ref<string | null>(null)
  let channel: ReturnType<typeof supabase.channel> | null = null

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Message
   const convertSupabaseToMessage = (data: Record<string, any>): Message => {
    return {
      id: data.id.toString(),
      chatId: data.chat_id,
      text: data.message_text || '',
      isAgent: data.role_user === 'agent',
      isUserMessage: data.role_user === 'user',
      createdAt: new Date(data.created_at),
      processed: data.processed,
      channelId: data.channelid,
      roleUser: data.role_user,
      messageId: data.message_id,
      file: data.file,
      isEcho: data.isecho,
      status: data.status,
      answer: data.answer
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã save_messages
  const subscribe = () => {
    console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤...')

    channel = supabase
      .channel('messages_changes')
      .on(
        'postgres_changes' as any,
        {
          event: '*',
          schema: 'public',
          table: 'save_messages'
        },
        (payload: RealtimePayload) => {
          console.log('üì® Real-time —Å–æ–±—ã—Ç–∏–µ:', payload)

          try {
            switch (payload.eventType) {
              case 'INSERT':
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload.new —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 if (!payload.new) {
                   console.warn('‚ö†Ô∏è INSERT —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                   break
                 }

                 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                 const newMessage = convertSupabaseToMessage(payload.new)

                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ store
                 const existingIndex = store.messages.value.findIndex(m => m.id === newMessage.id)
                 if (existingIndex === -1) {
                   store.messages.value.push(newMessage)

                   // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
                   const chat = store.chats.value.find(c => c.id === newMessage.chatId)
                   if (chat) {
                     chat.lastMessageAt = newMessage.createdAt
                   }

                   console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', newMessage.id)
                 }
                 break

               case 'UPDATE':
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload.new —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 if (!payload.new) {
                   console.warn('‚ö†Ô∏è UPDATE —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                   break
                 }

                 // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                 const updatedMessage = convertSupabaseToMessage(payload.new)
                 const updateIndex = store.messages.value.findIndex(m => m.id === updatedMessage.id)

                 if (updateIndex !== -1) {
                   store.messages.value[updateIndex] = updatedMessage
                   console.log('üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedMessage.id)
                 }
                 break

               case 'DELETE':
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload.old —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç id
                 if (!payload.old?.id) {
                   console.warn('‚ö†Ô∏è DELETE —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                   break
                 }

                 // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                 const deleteIndex = store.messages.value.findIndex(m => m.id === payload.old.id)
                 if (deleteIndex !== -1) {
                   store.messages.value.splice(deleteIndex, 1)
                   console.log('üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', payload.old.id)
                 }
                 break
            }
          } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ real-time —Å–æ–±—ã—Ç–∏—è:', err)
            error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è'
          }
        }
      )
      .subscribe((status: string) => {
        isConnected.value = status === 'SUBSCRIBED'
        console.log('üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', status)

        if (status === 'SUBSCRIBED') {
          error.value = null
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º')
        } else if (status === 'CHANNEL_ERROR') {
          error.value = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ real-time'
          console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ real-time')
        }
      })
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   const unsubscribe = () => {
     if (channel) {
       console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...')
       try {
         supabase.removeChannel(channel)
         channel = null
         isConnected.value = false
         console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π')
       } catch (err) {
         console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç real-time:', err)
         // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
         channel = null
         isConnected.value = false
       }
     }
   }

  // Lifecycle —Ö—É–∫–∏
  onMounted(() => {
    // –ù–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∂–¥–µ–º –≤—ã–∑–æ–≤–∞ subscribe()
    console.log('üöÄ useRealtimeChats –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
  })

  onUnmounted(() => {
    unsubscribe()
  })

  return {
    isConnected,
    error,
    subscribe,
    unsubscribe
  }
}