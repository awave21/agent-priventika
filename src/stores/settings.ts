import type { Settings } from '../types'
import { settings } from './state'
import { supabaseFetch } from '../lib/supabase'

const SETTINGS_STORAGE_KEY = 'harvi_settings'

export const saveSettingsToLocalStorage = (settingsData: Settings) => {
  try {
    const toStore = {
      agentMode: settingsData.agentMode,
      agentActive: settingsData.agentActive,
      sentNewUser: settingsData.sentNewUser,
      botResponseDelayMinutes: settingsData.botResponseDelayMinutes,
      supabaseUrl: settingsData.supabaseUrl,
      supabaseAnonKey: settingsData.supabaseAnonKey
    }
    localStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(toStore))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage:', error)
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã agent –≤ Supabase
 */
export const loadAgentModeFromSupabase = async () => {
  const url = settings.value.supabaseUrl
  const key = settings.value.supabaseAnonKey

  if (!url || !key) {
    console.warn('[loadAgentModeFromSupabase] Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É')
    return
  }

  try {
    const { data, error } = await supabaseFetch<any[]>(
      url,
      key,
      'agent?select=*&order=id.desc&limit=1',
      {
        headers: {
          'Range': '0-0',
          'Prefer': 'count=exact'
        }
      }
    )

    if (error) {
      console.error('[loadAgentModeFromSupabase] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
      return
    }

    if (data && data.length > 0) {
      const agentRecord = data[0]
      const isAgentMode = agentRecord.mode === 'agent'
      const isActive = agentRecord.active === true
      const isSentNewUser = agentRecord.sent_new_user === true

      console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–∂–∏–º –∏–∑ Supabase:', {
        mode: agentRecord.mode,
        active: agentRecord.active,
        sent_new_user: agentRecord.sent_new_user,
        agentMode: isAgentMode,
        agentActive: isActive,
        sentNewUser: isSentNewUser
      })

      settings.value.agentMode = isAgentMode
      settings.value.agentActive = isActive
      settings.value.sentNewUser = isSentNewUser
      settings.value.updatedAt = new Date()
    }
  } catch (error) {
    console.error('[loadAgentModeFromSupabase] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–≥–µ–Ω—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π agent –≤ Supabase
 */
const syncAgentModeToSupabase = async (isAgentMode: boolean) => {
  const url = settings.value.supabaseUrl
  const key = settings.value.supabaseAnonKey

  if (!url || !key) {
    console.warn('[syncAgentModeToSupabase] Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é')
    return
  }

  const mode = isAgentMode ? 'agent' : 'manager'

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    const { data: existingData } = await supabaseFetch<any[]>(
      url,
      key,
      'agent?select=*&order=id.desc&limit=1'
    )

    if (existingData && existingData.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const recordId = existingData[0].id
      const { error } = await supabaseFetch(
        url,
        key,
        `agent?id=eq.${recordId}`,
        {
          method: 'PATCH',
          body: JSON.stringify({
            mode,
            active: true,
            created_at: new Date().toISOString()
          })
        }
      )

      if (error) {
        console.error('[syncAgentModeToSupabase] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase:', mode)
      }
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { error } = await supabaseFetch(
        url,
        key,
        'agent',
        {
          method: 'POST',
          body: JSON.stringify({
            mode,
            active: true
          })
        }
      )

      if (error) {
        console.error('[syncAgentModeToSupabase] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', mode)
      }
    }
  } catch (error) {
    console.error('[syncAgentModeToSupabase] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
  }
}

export const toggleAgentMode = async () => {
  settings.value.agentMode = !settings.value.agentMode
  settings.value.updatedAt = new Date()

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
  await syncAgentModeToSupabase(settings.value.agentMode)
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ active –∞–≥–µ–Ω—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å Supabase
 */
export const toggleAgentActive = async () => {
  settings.value.agentActive = !settings.value.agentActive
  settings.value.updatedAt = new Date()

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
  await syncAgentActiveToSupabase(settings.value.agentActive)
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ active —Å —Ç–∞–±–ª–∏—Ü–µ–π agent –≤ Supabase
 */
const syncAgentActiveToSupabase = async (isActive: boolean) => {
  const url = settings.value.supabaseUrl
  const key = settings.value.supabaseAnonKey

  if (!url || !key) {
    console.warn('[syncAgentActiveToSupabase] Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é')
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    const { data: existingData } = await supabaseFetch<any[]>(
      url,
      key,
      'agent?select=*&order=id.desc&limit=1'
    )

    if (existingData && existingData.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const recordId = existingData[0].id
      const { error } = await supabaseFetch(
        url,
        key,
        `agent?id=eq.${recordId}`,
        {
          method: 'PATCH',
          body: JSON.stringify({
            active: isActive
          })
        }
      )

      if (error) {
        console.error('[syncAgentActiveToSupabase] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å active –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase:', isActive)
      }
    } else {
      console.warn('[syncAgentActiveToSupabase] –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é')
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { error } = await supabaseFetch(
        url,
        key,
        'agent',
        {
          method: 'POST',
          body: JSON.stringify({
            mode: settings.value.agentMode ? 'agent' : 'manager',
            active: isActive
          })
        }
      )

      if (error) {
        console.error('[syncAgentActiveToSupabase] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å active —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', isActive)
      }
    }
  } catch (error) {
    console.error('[syncAgentActiveToSupabase] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export const toggleSentNewUser = async () => {
  settings.value.sentNewUser = !settings.value.sentNewUser
  settings.value.updatedAt = new Date()

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
  await syncSentNewUserToSupabase(settings.value.sentNewUser)
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ sent_new_user —Å —Ç–∞–±–ª–∏—Ü–µ–π agent –≤ Supabase
 */
const syncSentNewUserToSupabase = async (sentNewUser: boolean) => {
  const url = settings.value.supabaseUrl
  const key = settings.value.supabaseAnonKey

  if (!url || !key) {
    console.warn('[syncSentNewUserToSupabase] Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é')
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    const { data: existingData } = await supabaseFetch<any[]>(
      url,
      key,
      'agent?select=*&order=id.desc&limit=1'
    )

    if (existingData && existingData.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const recordId = existingData[0].id
      const { error } = await supabaseFetch(
        url,
        key,
        `agent?id=eq.${recordId}`,
        {
          method: 'PATCH',
          body: JSON.stringify({
            sent_new_user: sentNewUser
          })
        }
      )

      if (error) {
        console.error('[syncSentNewUserToSupabase] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å sent_new_user –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase:', sentNewUser)
      }
    } else {
      console.warn('[syncSentNewUserToSupabase] –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é')
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { error } = await supabaseFetch(
        url,
        key,
        'agent',
        {
          method: 'POST',
          body: JSON.stringify({
            mode: settings.value.agentMode ? 'agent' : 'manager',
            active: settings.value.agentActive,
            sent_new_user: sentNewUser
          })
        }
      )

      if (error) {
        console.error('[syncSentNewUserToSupabase] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error)
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å sent_new_user —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', sentNewUser)
      }
    }
  } catch (error) {
    console.error('[syncSentNewUserToSupabase] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
  }
}

export const updateSettings = (updates: Partial<Settings>) => {
  settings.value = { ...settings.value, ...updates, updatedAt: new Date() }
  saveSettingsToLocalStorage(settings.value)
}
